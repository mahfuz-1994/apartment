'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class objtransactionset
    Inherits DataSet
    
    Private tableRoomTransaction As RoomTransactionDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RoomTransaction")) Is Nothing) Then
                Me.Tables.Add(New RoomTransactionDataTable(ds.Tables("RoomTransaction")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RoomTransaction As RoomTransactionDataTable
        Get
            Return Me.tableRoomTransaction
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As objtransactionset = CType(MyBase.Clone,objtransactionset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("RoomTransaction")) Is Nothing) Then
            Me.Tables.Add(New RoomTransactionDataTable(ds.Tables("RoomTransaction")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableRoomTransaction = CType(Me.Tables("RoomTransaction"),RoomTransactionDataTable)
        If (Not (Me.tableRoomTransaction) Is Nothing) Then
            Me.tableRoomTransaction.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "objtransactionset"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/objtransactionset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableRoomTransaction = New RoomTransactionDataTable
        Me.Tables.Add(Me.tableRoomTransaction)
    End Sub
    
    Private Function ShouldSerializeRoomTransaction() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub RoomTransactionRowChangeEventHandler(ByVal sender As Object, ByVal e As RoomTransactionRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RoomTransactionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerID As DataColumn
        
        Private columnDryCleaningBill As DataColumn
        
        Private columnElectricityBill As DataColumn
        
        Private columnMaintainanceBill As DataColumn
        
        Private columnMonth As DataColumn
        
        Private columnName As DataColumn
        
        Private columnRoomNo As DataColumn
        
        Private columnTotalBill As DataColumn
        
        Private columnTransactionDate As DataColumn
        
        Private columnTransactionID As DataColumn
        
        Private columnWaterBill As DataColumn
        
        Private columnRentExpense As DataColumn
        
        Friend Sub New()
            MyBase.New("RoomTransaction")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property DryCleaningBillColumn As DataColumn
            Get
                Return Me.columnDryCleaningBill
            End Get
        End Property
        
        Friend ReadOnly Property ElectricityBillColumn As DataColumn
            Get
                Return Me.columnElectricityBill
            End Get
        End Property
        
        Friend ReadOnly Property MaintainanceBillColumn As DataColumn
            Get
                Return Me.columnMaintainanceBill
            End Get
        End Property
        
        Friend ReadOnly Property MonthColumn As DataColumn
            Get
                Return Me.columnMonth
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property RoomNoColumn As DataColumn
            Get
                Return Me.columnRoomNo
            End Get
        End Property
        
        Friend ReadOnly Property TotalBillColumn As DataColumn
            Get
                Return Me.columnTotalBill
            End Get
        End Property
        
        Friend ReadOnly Property TransactionDateColumn As DataColumn
            Get
                Return Me.columnTransactionDate
            End Get
        End Property
        
        Friend ReadOnly Property TransactionIDColumn As DataColumn
            Get
                Return Me.columnTransactionID
            End Get
        End Property
        
        Friend ReadOnly Property WaterBillColumn As DataColumn
            Get
                Return Me.columnWaterBill
            End Get
        End Property
        
        Friend ReadOnly Property RentExpenseColumn As DataColumn
            Get
                Return Me.columnRentExpense
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RoomTransactionRow
            Get
                Return CType(Me.Rows(index),RoomTransactionRow)
            End Get
        End Property
        
        Public Event RoomTransactionRowChanged As RoomTransactionRowChangeEventHandler
        
        Public Event RoomTransactionRowChanging As RoomTransactionRowChangeEventHandler
        
        Public Event RoomTransactionRowDeleted As RoomTransactionRowChangeEventHandler
        
        Public Event RoomTransactionRowDeleting As RoomTransactionRowChangeEventHandler
        
        Public Overloads Sub AddRoomTransactionRow(ByVal row As RoomTransactionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRoomTransactionRow(ByVal CustomerID As String, ByVal DryCleaningBill As Decimal, ByVal ElectricityBill As Decimal, ByVal MaintainanceBill As Decimal, ByVal Month As String, ByVal Name As String, ByVal RoomNo As Integer, ByVal TotalBill As Decimal, ByVal TransactionDate As String, ByVal WaterBill As Decimal, ByVal RentExpense As Decimal) As RoomTransactionRow
            Dim rowRoomTransactionRow As RoomTransactionRow = CType(Me.NewRow,RoomTransactionRow)
            rowRoomTransactionRow.ItemArray = New Object() {CustomerID, DryCleaningBill, ElectricityBill, MaintainanceBill, Month, Name, RoomNo, TotalBill, TransactionDate, Nothing, WaterBill, RentExpense}
            Me.Rows.Add(rowRoomTransactionRow)
            Return rowRoomTransactionRow
        End Function
        
        Public Function FindByTransactionID(ByVal TransactionID As Integer) As RoomTransactionRow
            Return CType(Me.Rows.Find(New Object() {TransactionID}),RoomTransactionRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RoomTransactionDataTable = CType(MyBase.Clone,RoomTransactionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RoomTransactionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerID = Me.Columns("CustomerID")
            Me.columnDryCleaningBill = Me.Columns("DryCleaningBill")
            Me.columnElectricityBill = Me.Columns("ElectricityBill")
            Me.columnMaintainanceBill = Me.Columns("MaintainanceBill")
            Me.columnMonth = Me.Columns("Month")
            Me.columnName = Me.Columns("Name")
            Me.columnRoomNo = Me.Columns("RoomNo")
            Me.columnTotalBill = Me.Columns("TotalBill")
            Me.columnTransactionDate = Me.Columns("TransactionDate")
            Me.columnTransactionID = Me.Columns("TransactionID")
            Me.columnWaterBill = Me.Columns("WaterBill")
            Me.columnRentExpense = Me.Columns("RentExpense")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnDryCleaningBill = New DataColumn("DryCleaningBill", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDryCleaningBill)
            Me.columnElectricityBill = New DataColumn("ElectricityBill", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnElectricityBill)
            Me.columnMaintainanceBill = New DataColumn("MaintainanceBill", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaintainanceBill)
            Me.columnMonth = New DataColumn("Month", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonth)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnRoomNo = New DataColumn("RoomNo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRoomNo)
            Me.columnTotalBill = New DataColumn("TotalBill", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalBill)
            Me.columnTransactionDate = New DataColumn("TransactionDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTransactionDate)
            Me.columnTransactionID = New DataColumn("TransactionID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTransactionID)
            Me.columnWaterBill = New DataColumn("WaterBill", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWaterBill)
            Me.columnRentExpense = New DataColumn("RentExpense", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRentExpense)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnTransactionID}, true))
            Me.columnTransactionID.AutoIncrement = true
            Me.columnTransactionID.AllowDBNull = false
            Me.columnTransactionID.Unique = true
        End Sub
        
        Public Function NewRoomTransactionRow() As RoomTransactionRow
            Return CType(Me.NewRow,RoomTransactionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RoomTransactionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RoomTransactionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RoomTransactionRowChangedEvent) Is Nothing) Then
                RaiseEvent RoomTransactionRowChanged(Me, New RoomTransactionRowChangeEvent(CType(e.Row,RoomTransactionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RoomTransactionRowChangingEvent) Is Nothing) Then
                RaiseEvent RoomTransactionRowChanging(Me, New RoomTransactionRowChangeEvent(CType(e.Row,RoomTransactionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RoomTransactionRowDeletedEvent) Is Nothing) Then
                RaiseEvent RoomTransactionRowDeleted(Me, New RoomTransactionRowChangeEvent(CType(e.Row,RoomTransactionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RoomTransactionRowDeletingEvent) Is Nothing) Then
                RaiseEvent RoomTransactionRowDeleting(Me, New RoomTransactionRowChangeEvent(CType(e.Row,RoomTransactionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRoomTransactionRow(ByVal row As RoomTransactionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RoomTransactionRow
        Inherits DataRow
        
        Private tableRoomTransaction As RoomTransactionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRoomTransaction = CType(Me.Table,RoomTransactionDataTable)
        End Sub
        
        Public Property CustomerID As String
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.CustomerIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property DryCleaningBill As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.DryCleaningBillColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.DryCleaningBillColumn) = value
            End Set
        End Property
        
        Public Property ElectricityBill As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.ElectricityBillColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.ElectricityBillColumn) = value
            End Set
        End Property
        
        Public Property MaintainanceBill As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.MaintainanceBillColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.MaintainanceBillColumn) = value
            End Set
        End Property
        
        Public Property Month As String
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.MonthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.MonthColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.NameColumn) = value
            End Set
        End Property
        
        Public Property RoomNo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.RoomNoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.RoomNoColumn) = value
            End Set
        End Property
        
        Public Property TotalBill As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.TotalBillColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.TotalBillColumn) = value
            End Set
        End Property
        
        Public Property TransactionDate As String
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.TransactionDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.TransactionDateColumn) = value
            End Set
        End Property
        
        Public Property TransactionID As Integer
            Get
                Return CType(Me(Me.tableRoomTransaction.TransactionIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRoomTransaction.TransactionIDColumn) = value
            End Set
        End Property
        
        Public Property WaterBill As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.WaterBillColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.WaterBillColumn) = value
            End Set
        End Property
        
        Public Property RentExpense As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.RentExpenseColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.RentExpenseColumn) = value
            End Set
        End Property
        
        Public Function IsCustomerIDNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.CustomerIDColumn)
        End Function
        
        Public Sub SetCustomerIDNull()
            Me(Me.tableRoomTransaction.CustomerIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDryCleaningBillNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.DryCleaningBillColumn)
        End Function
        
        Public Sub SetDryCleaningBillNull()
            Me(Me.tableRoomTransaction.DryCleaningBillColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsElectricityBillNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.ElectricityBillColumn)
        End Function
        
        Public Sub SetElectricityBillNull()
            Me(Me.tableRoomTransaction.ElectricityBillColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaintainanceBillNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.MaintainanceBillColumn)
        End Function
        
        Public Sub SetMaintainanceBillNull()
            Me(Me.tableRoomTransaction.MaintainanceBillColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonthNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.MonthColumn)
        End Function
        
        Public Sub SetMonthNull()
            Me(Me.tableRoomTransaction.MonthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableRoomTransaction.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRoomNoNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.RoomNoColumn)
        End Function
        
        Public Sub SetRoomNoNull()
            Me(Me.tableRoomTransaction.RoomNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalBillNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.TotalBillColumn)
        End Function
        
        Public Sub SetTotalBillNull()
            Me(Me.tableRoomTransaction.TotalBillColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTransactionDateNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.TransactionDateColumn)
        End Function
        
        Public Sub SetTransactionDateNull()
            Me(Me.tableRoomTransaction.TransactionDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWaterBillNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.WaterBillColumn)
        End Function
        
        Public Sub SetWaterBillNull()
            Me(Me.tableRoomTransaction.WaterBillColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRentExpenseNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.RentExpenseColumn)
        End Function
        
        Public Sub SetRentExpenseNull()
            Me(Me.tableRoomTransaction.RentExpenseColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RoomTransactionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RoomTransactionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RoomTransactionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RoomTransactionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
