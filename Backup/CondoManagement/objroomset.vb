'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class objroomset
    Inherits DataSet
    
    Private tableRoom As RoomDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Room")) Is Nothing) Then
                Me.Tables.Add(New RoomDataTable(ds.Tables("Room")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Room As RoomDataTable
        Get
            Return Me.tableRoom
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As objroomset = CType(MyBase.Clone,objroomset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Room")) Is Nothing) Then
            Me.Tables.Add(New RoomDataTable(ds.Tables("Room")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableRoom = CType(Me.Tables("Room"),RoomDataTable)
        If (Not (Me.tableRoom) Is Nothing) Then
            Me.tableRoom.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "objroomset"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/objroomset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableRoom = New RoomDataTable
        Me.Tables.Add(Me.tableRoom)
    End Sub
    
    Private Function ShouldSerializeRoom() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub RoomRowChangeEventHandler(ByVal sender As Object, ByVal e As RoomRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RoomDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnContract As DataColumn
        
        Private columnCustomerID As DataColumn
        
        Private columnFloor As DataColumn
        
        Private columnLeavingDate As DataColumn
        
        Private columnName As DataColumn
        
        Private columnRentDate As DataColumn
        
        Private columnRoomNo As DataColumn
        
        Friend Sub New()
            MyBase.New("Room")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ContractColumn As DataColumn
            Get
                Return Me.columnContract
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property FloorColumn As DataColumn
            Get
                Return Me.columnFloor
            End Get
        End Property
        
        Friend ReadOnly Property LeavingDateColumn As DataColumn
            Get
                Return Me.columnLeavingDate
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property RentDateColumn As DataColumn
            Get
                Return Me.columnRentDate
            End Get
        End Property
        
        Friend ReadOnly Property RoomNoColumn As DataColumn
            Get
                Return Me.columnRoomNo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RoomRow
            Get
                Return CType(Me.Rows(index),RoomRow)
            End Get
        End Property
        
        Public Event RoomRowChanged As RoomRowChangeEventHandler
        
        Public Event RoomRowChanging As RoomRowChangeEventHandler
        
        Public Event RoomRowDeleted As RoomRowChangeEventHandler
        
        Public Event RoomRowDeleting As RoomRowChangeEventHandler
        
        Public Overloads Sub AddRoomRow(ByVal row As RoomRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRoomRow(ByVal Contract As String, ByVal CustomerID As String, ByVal Floor As Integer, ByVal LeavingDate As Date, ByVal Name As String, ByVal RentDate As Date, ByVal RoomNo As Integer) As RoomRow
            Dim rowRoomRow As RoomRow = CType(Me.NewRow,RoomRow)
            rowRoomRow.ItemArray = New Object() {Contract, CustomerID, Floor, LeavingDate, Name, RentDate, RoomNo}
            Me.Rows.Add(rowRoomRow)
            Return rowRoomRow
        End Function
        
        Public Function FindByRoomNo(ByVal RoomNo As Integer) As RoomRow
            Return CType(Me.Rows.Find(New Object() {RoomNo}),RoomRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RoomDataTable = CType(MyBase.Clone,RoomDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RoomDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnContract = Me.Columns("Contract")
            Me.columnCustomerID = Me.Columns("CustomerID")
            Me.columnFloor = Me.Columns("Floor")
            Me.columnLeavingDate = Me.Columns("LeavingDate")
            Me.columnName = Me.Columns("Name")
            Me.columnRentDate = Me.Columns("RentDate")
            Me.columnRoomNo = Me.Columns("RoomNo")
        End Sub
        
        Private Sub InitClass()
            Me.columnContract = New DataColumn("Contract", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContract)
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnFloor = New DataColumn("Floor", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFloor)
            Me.columnLeavingDate = New DataColumn("LeavingDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLeavingDate)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnRentDate = New DataColumn("RentDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRentDate)
            Me.columnRoomNo = New DataColumn("RoomNo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRoomNo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnRoomNo}, true))
            Me.columnRoomNo.AllowDBNull = false
            Me.columnRoomNo.Unique = true
        End Sub
        
        Public Function NewRoomRow() As RoomRow
            Return CType(Me.NewRow,RoomRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RoomRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RoomRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RoomRowChangedEvent) Is Nothing) Then
                RaiseEvent RoomRowChanged(Me, New RoomRowChangeEvent(CType(e.Row,RoomRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RoomRowChangingEvent) Is Nothing) Then
                RaiseEvent RoomRowChanging(Me, New RoomRowChangeEvent(CType(e.Row,RoomRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RoomRowDeletedEvent) Is Nothing) Then
                RaiseEvent RoomRowDeleted(Me, New RoomRowChangeEvent(CType(e.Row,RoomRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RoomRowDeletingEvent) Is Nothing) Then
                RaiseEvent RoomRowDeleting(Me, New RoomRowChangeEvent(CType(e.Row,RoomRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRoomRow(ByVal row As RoomRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RoomRow
        Inherits DataRow
        
        Private tableRoom As RoomDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRoom = CType(Me.Table,RoomDataTable)
        End Sub
        
        Public Property Contract As String
            Get
                Try 
                    Return CType(Me(Me.tableRoom.ContractColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoom.ContractColumn) = value
            End Set
        End Property
        
        Public Property CustomerID As String
            Get
                Try 
                    Return CType(Me(Me.tableRoom.CustomerIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoom.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property Floor As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRoom.FloorColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoom.FloorColumn) = value
            End Set
        End Property
        
        Public Property LeavingDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableRoom.LeavingDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoom.LeavingDateColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableRoom.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoom.NameColumn) = value
            End Set
        End Property
        
        Public Property RentDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableRoom.RentDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoom.RentDateColumn) = value
            End Set
        End Property
        
        Public Property RoomNo As Integer
            Get
                Return CType(Me(Me.tableRoom.RoomNoColumn),Integer)
            End Get
            Set
                Me(Me.tableRoom.RoomNoColumn) = value
            End Set
        End Property
        
        Public Function IsContractNull() As Boolean
            Return Me.IsNull(Me.tableRoom.ContractColumn)
        End Function
        
        Public Sub SetContractNull()
            Me(Me.tableRoom.ContractColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerIDNull() As Boolean
            Return Me.IsNull(Me.tableRoom.CustomerIDColumn)
        End Function
        
        Public Sub SetCustomerIDNull()
            Me(Me.tableRoom.CustomerIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFloorNull() As Boolean
            Return Me.IsNull(Me.tableRoom.FloorColumn)
        End Function
        
        Public Sub SetFloorNull()
            Me(Me.tableRoom.FloorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLeavingDateNull() As Boolean
            Return Me.IsNull(Me.tableRoom.LeavingDateColumn)
        End Function
        
        Public Sub SetLeavingDateNull()
            Me(Me.tableRoom.LeavingDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableRoom.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableRoom.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRentDateNull() As Boolean
            Return Me.IsNull(Me.tableRoom.RentDateColumn)
        End Function
        
        Public Sub SetRentDateNull()
            Me(Me.tableRoom.RentDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RoomRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RoomRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RoomRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RoomRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
