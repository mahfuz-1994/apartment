'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("objtransactionset"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class objtransactionset
    Inherits System.Data.DataSet
    
    Private tableRoomTransaction As RoomTransactionDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RoomTransaction")) Is Nothing) Then
                MyBase.Tables.Add(New RoomTransactionDataTable(ds.Tables("RoomTransaction")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RoomTransaction() As RoomTransactionDataTable
        Get
            Return Me.tableRoomTransaction
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As objtransactionset = CType(MyBase.Clone,objtransactionset)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("RoomTransaction")) Is Nothing) Then
                MyBase.Tables.Add(New RoomTransactionDataTable(ds.Tables("RoomTransaction")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableRoomTransaction = CType(MyBase.Tables("RoomTransaction"),RoomTransactionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRoomTransaction) Is Nothing) Then
                Me.tableRoomTransaction.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "objtransactionset"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/objtransactionset.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableRoomTransaction = New RoomTransactionDataTable
        MyBase.Tables.Add(Me.tableRoomTransaction)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRoomTransaction() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As objtransactionset = New objtransactionset
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub RoomTransactionRowChangeEventHandler(ByVal sender As Object, ByVal e As RoomTransactionRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RoomTransactionDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerID As System.Data.DataColumn
        
        Private columnDryCleaningBill As System.Data.DataColumn
        
        Private columnElectricityBill As System.Data.DataColumn
        
        Private columnMaintainanceBill As System.Data.DataColumn
        
        Private columnMonth As System.Data.DataColumn
        
        Private columnName As System.Data.DataColumn
        
        Private columnRoomNo As System.Data.DataColumn
        
        Private columnTotalBill As System.Data.DataColumn
        
        Private columnTransactionDate As System.Data.DataColumn
        
        Private columnTransactionID As System.Data.DataColumn
        
        Private columnWaterBill As System.Data.DataColumn
        
        Private columnRentExpense As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RoomTransaction"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DryCleaningBillColumn() As System.Data.DataColumn
            Get
                Return Me.columnDryCleaningBill
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ElectricityBillColumn() As System.Data.DataColumn
            Get
                Return Me.columnElectricityBill
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaintainanceBillColumn() As System.Data.DataColumn
            Get
                Return Me.columnMaintainanceBill
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonthColumn() As System.Data.DataColumn
            Get
                Return Me.columnMonth
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RoomNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnRoomNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalBillColumn() As System.Data.DataColumn
            Get
                Return Me.columnTotalBill
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransactionDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnTransactionDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransactionIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnTransactionID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WaterBillColumn() As System.Data.DataColumn
            Get
                Return Me.columnWaterBill
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RentExpenseColumn() As System.Data.DataColumn
            Get
                Return Me.columnRentExpense
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RoomTransactionRow
            Get
                Return CType(Me.Rows(index),RoomTransactionRow)
            End Get
        End Property
        
        Public Event RoomTransactionRowChanging As RoomTransactionRowChangeEventHandler
        
        Public Event RoomTransactionRowChanged As RoomTransactionRowChangeEventHandler
        
        Public Event RoomTransactionRowDeleting As RoomTransactionRowChangeEventHandler
        
        Public Event RoomTransactionRowDeleted As RoomTransactionRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRoomTransactionRow(ByVal row As RoomTransactionRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRoomTransactionRow(ByVal CustomerID As String, ByVal DryCleaningBill As Decimal, ByVal ElectricityBill As Decimal, ByVal MaintainanceBill As Decimal, ByVal Month As String, ByVal Name As String, ByVal RoomNo As Integer, ByVal TotalBill As Decimal, ByVal TransactionDate As String, ByVal WaterBill As Decimal, ByVal RentExpense As Decimal) As RoomTransactionRow
            Dim rowRoomTransactionRow As RoomTransactionRow = CType(Me.NewRow,RoomTransactionRow)
            rowRoomTransactionRow.ItemArray = New Object() {CustomerID, DryCleaningBill, ElectricityBill, MaintainanceBill, Month, Name, RoomNo, TotalBill, TransactionDate, Nothing, WaterBill, RentExpense}
            Me.Rows.Add(rowRoomTransactionRow)
            Return rowRoomTransactionRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTransactionID(ByVal TransactionID As Integer) As RoomTransactionRow
            Return CType(Me.Rows.Find(New Object() {TransactionID}),RoomTransactionRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As RoomTransactionDataTable = CType(MyBase.Clone,RoomTransactionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New RoomTransactionDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCustomerID = MyBase.Columns("CustomerID")
            Me.columnDryCleaningBill = MyBase.Columns("DryCleaningBill")
            Me.columnElectricityBill = MyBase.Columns("ElectricityBill")
            Me.columnMaintainanceBill = MyBase.Columns("MaintainanceBill")
            Me.columnMonth = MyBase.Columns("Month")
            Me.columnName = MyBase.Columns("Name")
            Me.columnRoomNo = MyBase.Columns("RoomNo")
            Me.columnTotalBill = MyBase.Columns("TotalBill")
            Me.columnTransactionDate = MyBase.Columns("TransactionDate")
            Me.columnTransactionID = MyBase.Columns("TransactionID")
            Me.columnWaterBill = MyBase.Columns("WaterBill")
            Me.columnRentExpense = MyBase.Columns("RentExpense")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCustomerID = New System.Data.DataColumn("CustomerID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerID)
            Me.columnDryCleaningBill = New System.Data.DataColumn("DryCleaningBill", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDryCleaningBill)
            Me.columnElectricityBill = New System.Data.DataColumn("ElectricityBill", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnElectricityBill)
            Me.columnMaintainanceBill = New System.Data.DataColumn("MaintainanceBill", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaintainanceBill)
            Me.columnMonth = New System.Data.DataColumn("Month", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonth)
            Me.columnName = New System.Data.DataColumn("Name", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnRoomNo = New System.Data.DataColumn("RoomNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRoomNo)
            Me.columnTotalBill = New System.Data.DataColumn("TotalBill", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalBill)
            Me.columnTransactionDate = New System.Data.DataColumn("TransactionDate", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransactionDate)
            Me.columnTransactionID = New System.Data.DataColumn("TransactionID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransactionID)
            Me.columnWaterBill = New System.Data.DataColumn("WaterBill", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWaterBill)
            Me.columnRentExpense = New System.Data.DataColumn("RentExpense", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRentExpense)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnTransactionID}, true))
            Me.columnTransactionID.AutoIncrement = true
            Me.columnTransactionID.AllowDBNull = false
            Me.columnTransactionID.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRoomTransactionRow() As RoomTransactionRow
            Return CType(Me.NewRow,RoomTransactionRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New RoomTransactionRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RoomTransactionRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RoomTransactionRowChangedEvent) Is Nothing) Then
                RaiseEvent RoomTransactionRowChanged(Me, New RoomTransactionRowChangeEvent(CType(e.Row,RoomTransactionRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RoomTransactionRowChangingEvent) Is Nothing) Then
                RaiseEvent RoomTransactionRowChanging(Me, New RoomTransactionRowChangeEvent(CType(e.Row,RoomTransactionRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RoomTransactionRowDeletedEvent) Is Nothing) Then
                RaiseEvent RoomTransactionRowDeleted(Me, New RoomTransactionRowChangeEvent(CType(e.Row,RoomTransactionRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RoomTransactionRowDeletingEvent) Is Nothing) Then
                RaiseEvent RoomTransactionRowDeleting(Me, New RoomTransactionRowChangeEvent(CType(e.Row,RoomTransactionRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRoomTransactionRow(ByVal row As RoomTransactionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As objtransactionset = New objtransactionset
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RoomTransactionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RoomTransactionRow
        Inherits System.Data.DataRow
        
        Private tableRoomTransaction As RoomTransactionDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRoomTransaction = CType(Me.Table,RoomTransactionDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerID() As String
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.CustomerIDColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CustomerID' in table 'RoomTransaction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.CustomerIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DryCleaningBill() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.DryCleaningBillColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DryCleaningBill' in table 'RoomTransaction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.DryCleaningBillColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ElectricityBill() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.ElectricityBillColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ElectricityBill' in table 'RoomTransaction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.ElectricityBillColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaintainanceBill() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.MaintainanceBillColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MaintainanceBill' in table 'RoomTransaction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.MaintainanceBillColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Month() As String
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.MonthColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Month' in table 'RoomTransaction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.MonthColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.NameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Name' in table 'RoomTransaction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.NameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RoomNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.RoomNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'RoomNo' in table 'RoomTransaction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.RoomNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalBill() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.TotalBillColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TotalBill' in table 'RoomTransaction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.TotalBillColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransactionDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.TransactionDateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TransactionDate' in table 'RoomTransaction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.TransactionDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransactionID() As Integer
            Get
                Return CType(Me(Me.tableRoomTransaction.TransactionIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRoomTransaction.TransactionIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WaterBill() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.WaterBillColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'WaterBill' in table 'RoomTransaction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.WaterBillColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RentExpense() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRoomTransaction.RentExpenseColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'RentExpense' in table 'RoomTransaction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomTransaction.RentExpenseColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerIDNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.CustomerIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerIDNull()
            Me(Me.tableRoomTransaction.CustomerIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDryCleaningBillNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.DryCleaningBillColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDryCleaningBillNull()
            Me(Me.tableRoomTransaction.DryCleaningBillColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsElectricityBillNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.ElectricityBillColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetElectricityBillNull()
            Me(Me.tableRoomTransaction.ElectricityBillColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaintainanceBillNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.MaintainanceBillColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaintainanceBillNull()
            Me(Me.tableRoomTransaction.MaintainanceBillColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonthNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.MonthColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonthNull()
            Me(Me.tableRoomTransaction.MonthColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.NameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tableRoomTransaction.NameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRoomNoNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.RoomNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRoomNoNull()
            Me(Me.tableRoomTransaction.RoomNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalBillNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.TotalBillColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalBillNull()
            Me(Me.tableRoomTransaction.TotalBillColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransactionDateNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.TransactionDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransactionDateNull()
            Me(Me.tableRoomTransaction.TransactionDateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWaterBillNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.WaterBillColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWaterBillNull()
            Me(Me.tableRoomTransaction.WaterBillColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRentExpenseNull() As Boolean
            Return Me.IsNull(Me.tableRoomTransaction.RentExpenseColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRentExpenseNull()
            Me(Me.tableRoomTransaction.RentExpenseColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RoomTransactionRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As RoomTransactionRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RoomTransactionRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RoomTransactionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
